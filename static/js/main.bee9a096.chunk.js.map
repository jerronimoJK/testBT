{"version":3,"sources":["logo.svg","bluetooth.js","sbrick.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WebBluetooth","encoder","TextEncoder","decoder","TextDecoder","Object","classCallCheck","this","device","server","_characteristics","Map","_debug","_connected","createClass","key","value","gatt","connected","options","services","_this","navigator","bluetooth","requestDevice","then","_log","name","id","connect","Promise","all","keys","map","serviceId","getPrimaryService","service","characteristics","characteristicId","_cacheCharacteristic","catch","e","_error","_this2","resolve","reject","isConnected","disconnect","characteristicUuid","_this3","characteristic","get","readValue","buffer","DataView","uuid","_this4","writeValue","msg","console","debug","log","_this5","getCharacteristic","set","data","decode","encode","SBrick","CMD_BREAK","CMD_ADC","CMD_ADC_VOLT","PORTS","portId","channelsId","OUTPUT","CLOCKWISE","COUNTERCLOCKWISE","MIN","MAX","sbrick_name","webbluetooth","NAME","PORT0","TOPLEFT","PORT1","BOTTOMLEFT","PORT2","TOPRIGHT","PORT3","BOTTOMRIGHT","CW","CCW","SERVICES","keepalive","ports","power","direction","mode","busy","maxConcurrent","maxQueue","Infinity","queue","Queue","_characteristics2","_this$SERVICES","defineProperty","optionalServices","filters","namePrefix","acceptAllDevices","getFirmwareVersion","version","parseFloat","_keepalive","stopAll","clearInterval","_deviceInfo","portObj","arguments","undefined","_pvm","port","Math","min","max","parseInt","abs","add","writeCharacteristicValue","Uint8Array","portData","_getPortData","_sendPortChangeEvent","portObjs","Array","isArray","array","_getPorts","forEach","push","isNaN","_portsIdle","_setPortsBusy","command","index","toString","returnData","portIds","portsToUpdate","length","concat","stop","_volt","volt","fahrenheit","_temp","temp","sensorSeries","_this6","newPortStatus","drive","channels","_getPortChannels","_adc","arrayData","i","byteLength","getUint16","sensorData","type","voltage","ch0_raw","ch1_raw","typeId","round","uuid_characteristic","_this7","readCharacteristicValue","str","String","fromCharCode","getUint8","_this8","setInterval","getQueueLength","array_channels","_this9","_this10","update_pvm","srt","_delay","getInt16","obj","t","setTimeout","event","CustomEvent","detail","document","body","dispatchEvent","_this11","allAreIdle","status","_this12","App","props","possibleConstructorReturn","getPrototypeOf","call","connectBt","_services","getCharacteristics","ch","disconnectBt","SBRICK1","SBRICK2","getCharacteristic2","start1","val","start2","start3","fs","openFullscreen","handleOnChange","setState","value1","target","handleOnChangeS1","value2","handleOnChange2","setSbrick1","setSbrick2","state","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","inputStyle","transformOorigin","transform","boxShadow","height","width","react_default","a","createElement","className","style","margin","onClick","closeFullscreen","display","justifyContent","onChange","onTouchEnd","onMouseUp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bee9a096.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/*\n * Copyright (c) 2016-17 Francesco Marino\n *\n * @author Francesco Marino <francesco@360fun.net>\n * @website www.360fun.net\n *\n * This is just a basic Class to start playing with the new Web Bluetooth API,\n * specifications can change at any time so keep in mind that all of this is\n * mostly experimental! ;)\n *\n * Check your browser and platform implementation status first\n * https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const WebBluetooth = (function() {\n\t'use strict';\n\n\t// UTF-8\n\tlet encoder = new TextEncoder('utf-8');\n  let decoder = new TextDecoder('utf-8');\n\n\tclass WebBluetooth {\n\n\t\tconstructor() {\n      this.device           = null;\n      this.server           = null;\n      this._characteristics = new Map();\n\t\t\tthis._debug           = false;\n\t\t\tthis._connected       = false;\n    }\n\n\t\tisConnected() {\n\t\t\treturn this.device && this.device.gatt.connected && this._connected;\n\t\t}\n\n\t\tconnect(options,services) {\n\t\t\treturn navigator.bluetooth.requestDevice(options)\n      .then(device => {\n        this.device = device;\n\t\t\t\tthis._log('Connected to device named \"' + device.name + '\" with ID \"' + device.id + '\"');\n        return device.gatt.connect();\n\t\t\t})\n      .then(server => {\n        this.server = server;\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tObject.keys(services).map( serviceId => {\n\t\t\t\t\t\treturn server.getPrimaryService(serviceId).then(service => {\n\t\t\t\t\t\t\treturn Promise.all(\n\t\t\t\t\t\t\t\tObject.keys(services[serviceId].characteristics).map( characteristicId => {\n\t\t\t\t\t\t\t\t\treturn this._cacheCharacteristic(service, characteristicId)\n\t\t\t\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\t\t\t\tthis._log('Found characteristic \"' + characteristicId + '\"');\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch( e => { this._error('Characteristic \"' + characteristicId + '\" NOT found') } );\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t).then( () => {\n\t\t\t\t\t\t\t\treturn this._connected = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\tthis._log('Found service \"' + serviceId + '\"');\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch( e => { this._error('Service \"' + serviceId + '\"') } );\n\t\t\t\t\t})\n\t\t\t\t);\n      });\n    }\n\n\t\tdisconnect() {\n\t\t\treturn new Promise( (resolve, reject) =>  {\n\t\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject('Device not connected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t).then( ()=> {\n\t\t\t\tthis._log('Device disconnected')\n\t\t\t\tthis._connected = false;\n\t\t\t\treturn this.device.gatt.disconnect();\n\t\t\t}).catch( e => { this._error(e) } );\n\t\t}\n\n    readCharacteristicValue(characteristicUuid) {\n\t\t\treturn new Promise( (resolve, reject) =>  {\n\t\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject('Device not connected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t).then( ()=> {\n\t      let characteristic = this._characteristics.get(characteristicUuid);\n\t      return characteristic.readValue()\n\t      .then(value => {\n\t        // In Chrome 50+, a DataView is returned instead of an ArrayBuffer.\n\t        value = value.buffer ? value : new DataView(value);\n\t        this._log('READ', characteristic.uuid, value);\n\t        return value;\n\t      });\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n    }\n\n\t\twriteCharacteristicValue(characteristicUuid, value) {\n\t\t\treturn new Promise( (resolve, reject) =>  {\n\t\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject('Device not connected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t).then( ()=> {\n\t      let characteristic = this._characteristics.get(characteristicUuid);\n\t      this._log('WRITE', characteristic.uuid, value);\n\t      return characteristic.writeValue(value);\n\t\t\t}).catch( e => { this._error(e) } );\n    }\n\n\t\t_error(msg) {\n\t\t\tif(this._debug) {\n\t\t\t\tconsole.debug(msg);\n\t\t\t} else {\n\t\t\t\tthrow msg;\n\t\t\t}\n\t\t}\n\n\t\t_log(msg) {\n\t\t\tif(this._debug) {\n\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t}\n\n\t\t_cacheCharacteristic(service, characteristicUuid) {\n      return service.getCharacteristic(characteristicUuid)\n      .then(characteristic => {\n        this._characteristics.set(characteristicUuid, characteristic);\n      });\n    }\n\n\t\t_decodeString(data) {\n      return decoder.decode(data);\n    }\n    _encodeString(data) {\n      return encoder.encode(data);\n    }\n  }\n\n\treturn WebBluetooth;\n\n})();\n","/*\r\n * Copyright (c) 2016-17 Francesco Marino\r\n *\r\n * @author Francesco Marino <francesco@360fun.net>\r\n * @website www.360fun.net\r\n *\r\n * Requires bluetooth.js and promise-queue library\r\n * https://github.com/360fun/bluetooth.js\r\n * https://github.com/azproduction/promise-queue\r\n *\r\n * This code is compatible with SBrick Protocol 4.17\r\n * https://social.sbrick.com/wiki/view/pageId/11/slug/the-sbrick-ble-protocol\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport { WebBluetooth } from './bluetooth'\r\nimport Queue from 'promise-queue';\r\nexport const SBrick = (function()  {\r\n\t'use strict';\r\n\r\n\tconst ID_SBRICK                             = \"SBrick\";\r\n\tconst FIRMWARE_COMPATIBILITY                 = 4.17;\r\n\r\n\tconst UUID_SERVICE_DEVICEINFORMATION        = \"device_information\";\r\n\tconst UUID_CHARACTERISTIC_MODELNUMBER       = \"model_number_string\";\r\n\tconst UUID_CHARACTERISTIC_FIRMWAREREVISION  = \"firmware_revision_string\";\r\n\tconst UUID_CHARACTERISTIC_HARDWAREREVISION  = \"hardware_revision_string\";\r\n\tconst UUID_CHARACTERISTIC_SOFTWAREREVISION  = \"software_revision_string\";\r\n\tconst UUID_CHARACTERISTIC_MANUFACTURERNAME  = \"manufacturer_name_string\";\r\n\r\n\tconst UUID_SERVICE_REMOTECONTROL            = \"4dc591b0-857c-41de-b5f1-15abda665b0c\";\r\n\tconst UUID_CHARACTERISTIC_REMOTECONTROL     = \"02b8cbcc-0e25-4bda-8790-a15f53e6010f\";\r\n\tconst UUID_CHARACTERISTIC_QUICKDRIVE        = \"489a6ae0-c1ab-4c9c-bdb2-11d373c1b7fb\";\r\n\r\n\tconst UUID_SERVICE_OTA                      = \"1d14d6ee-fd63-4fa1-bfa4-8f47b42119f0\";\r\n\tconst UUID_CHARACTERISTIC_OTACONTROL        = \"f7bf3564-fb6d-4e53-88a4-5e37e0326063\";\r\n\r\n\t// REMOTE CONTROL COMMANDS\r\n\r\n\t// Exceptions\r\n\tconst ERROR_LENGTH  = 0x80; // Invalid command length\r\n\tconst ERROR_PARAM   = 0x81; // Invalid parameter\r\n\tconst ERROR_COMMAND = 0x82; // No such command\r\n\tconst ERROR_NOAUTH  = 0x83; // No authentication needed\r\n\tconst ERROR_AUTH    = 0x84; // Authentication error\r\n\tconst ERROR_DOAUTH  = 0x85; // Authentication needed\r\n\tconst ERROR_AUTHOR  = 0x86; // Authorization error\r\n\tconst ERROR_THERMAL = 0x87; // Thermal protection is active\r\n\tconst ERROR_STATE   = 0x88; // The system is in a state where the command does not make sense\r\n\r\n\t// Commands\r\n\tconst CMD_BREAK     = 0x00; // Stop command\r\n\tconst CMD_DRIVE     = 0x01; // Drive command\r\n\tconst CMD_ADC       = 0x0F; // Query ADC\r\n\tconst CMD_ADC_VOLT  = 0x08; // Get Voltage\r\n\tconst CMD_ADC_TEMP  = 0x09; // Get Temperature\r\n\tconst CMD_PVM       = 0x2C; // Periodic Voltage Measurements\r\n\r\n\t// SBrick Ports / Channels\r\n\tconst PORTS = [\r\n\t\t{ portId: 0x00, channelsId: [ 0x00, 0x01 ]},\r\n\t\t{ portId: 0x01, channelsId: [ 0x02, 0x03 ]},\r\n\t\t{ portId: 0x02, channelsId: [ 0x04, 0x05 ]},\r\n\t\t{ portId: 0x03, channelsId: [ 0x06, 0x07 ]}\r\n\t];\r\n\r\n\t// Port Mode\r\n\tconst INPUT  = 'input';\r\n\tconst OUTPUT = 'output';\r\n\tconst BREAK  = 'break';\r\n\r\n\t// Direction\r\n\tconst CLOCKWISE        = 0x00; // Clockwise\r\n\tconst COUNTERCLOCKWISE = 0x01; // Counterclockwise\r\n\r\n\t// Values limits\r\n\tconst MIN      = 0;   // No Speed\r\n\tconst MAX      = 255; // Max Speed\r\n\tconst MAX_QD   = 127; // Max Speed for QuickDrive\r\n\tconst MAX_VOLT = 9;   // Max Voltage = Full battery\r\n\r\n\t// Times in milliseconds\r\n\tconst T_KA  = 300; // Time interval for the keepalive loop (must be < 500ms - watchdog default)\r\n\tconst T_PVM = 500; // Time delay for PVM completion: the registry is update approximately 5 times per second (must be > 200ms)\r\n\r\n\t// Sbrick class definition\r\n\tclass SBrick {\r\n\r\n\t\t// CONSTRUCTOR\r\n\r\n\t\t/**\r\n\t\t* Create a new instance of the SBrick class (and accordingly also WebBluetooth)\r\n\t\t* @param {string} sbrick_name - The name of the sbrick\r\n\t\t*/\r\n\t\tconstructor( sbrick_name ) {\r\n\t\t\tthis.webbluetooth = new WebBluetooth();\r\n\r\n\t\t\t// export constants\r\n\t\t\tthis.NAME     = sbrick_name || \"\";\r\n\t\t\tthis.PORT0    = this.TOPLEFT     = PORTS[0].portId;\r\n\t\t\tthis.PORT1    = this.BOTTOMLEFT  = PORTS[1].portId;\r\n\t\t\tthis.PORT2    = this.TOPRIGHT    = PORTS[2].portId;\r\n\t\t\tthis.PORT3    = this.BOTTOMRIGHT = PORTS[3].portId;\r\n\t\t\tthis.CW       = CLOCKWISE;\r\n\t\t\tthis.CCW      = COUNTERCLOCKWISE;\r\n\t\t\tthis.MAX      = MAX;\r\n\t\t\tthis.SERVICES = {}\r\n\r\n\t\t\t// status\r\n\t\t\tthis.keepalive = null;\r\n\t\t\tthis.ports     = [\r\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false },\r\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false },\r\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false },\r\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false }\r\n\t\t\t];\r\n\r\n\t\t\t// queue\r\n\t\t\tthis.maxConcurrent = 1;\r\n\t\t\tthis.maxQueue      = Infinity;\r\n\t\t\tthis.queue         = new Queue( this.maxConcurrent, this.maxQueue );\r\n\r\n\t\t\t// debug\r\n\t\t\tthis._debug         = false;\r\n\t\t}\r\n\r\n\r\n\t\t// PUBLIC FUNCTIONS\r\n\r\n\t\t/**\r\n\t\t* Open the Web Bluetooth popup to search and connect the SBrick (filtered by name if previously specified)\r\n\t\t* @returns {promise returning undefined}\r\n\t\t*/\r\n\t\tconnect() {\r\n\t\t\tthis.SERVICES = {\r\n\t\t\t\t[UUID_SERVICE_DEVICEINFORMATION] : {\r\n\t\t\t\t\tname : \"Device Information\",\r\n\t\t\t\t\tcharacteristics : {\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_MODELNUMBER] : {\r\n\t\t\t\t\t\t\tname : \"Model Number String\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_FIRMWAREREVISION] : {\r\n\t\t\t\t\t\t\tname : \"Firmware Revision String\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_HARDWAREREVISION] : {\r\n\t\t\t\t\t\t\tname : \"Hardware Revision String\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_SOFTWAREREVISION] : {\r\n\t\t\t\t\t\t\tname : \"Software Revision String\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_MANUFACTURERNAME] : {\r\n\t\t\t\t\t\t\tname : \"Manufacturer Name String\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t[UUID_SERVICE_REMOTECONTROL] : {\r\n\t\t\t\t\tname : \"Remote Control\",\r\n\t\t\t\t\tcharacteristics : {\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_REMOTECONTROL] : {\r\n\t\t\t\t\t\t\tname : \"Quick Drive\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_QUICKDRIVE] : {\r\n\t\t\t\t\t\t\tname : \"Remote Control\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet options = {\r\n\t\t\t\t// filter by service should work but it doesn't show any SBrick...\r\n\t\t\t\t// filters: [{\r\n\t\t\t\t// \tservices: [ UUID_SERVICE_DEVICEINFORMATION, UUID_SERVICE_OTA, UUID_SERVICE_REMOTECONTROL ]\r\n\t\t\t\t// }],\r\n\t\t\t\toptionalServices: Object.keys(this.SERVICES)\r\n\t\t\t};\r\n\r\n\t\t\t// if the SBrick name is not defined it shows all the devices\r\n\t\t\t// I don't like this solution, would be better to filter \"by services\"\r\n\t\t\tif( this.NAME != \"\" ) {\r\n\t\t\t\toptions.filters = [{\r\n\t\t\t\t\tnamePrefix: [ this.NAME ]\r\n\t\t\t\t}];\r\n\t\t\t} else {\r\n\t\t\t\toptions.acceptAllDevices = true;\r\n\t\t\t}\r\n\t\t\treturn this.webbluetooth.connect(options,this.SERVICES)\r\n\t\t\t.then( () => {\r\n\t\t\t\tif( this.isConnected() ) {\r\n\t\t\t\t\tif( this._debug ) {\r\n\t\t\t\t\t\tthis._log( \"Connected to SBrick \" + this.webbluetooth.device.id );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Firmware Compatibility Check\r\n\t\t\t\t\tthis.getFirmwareVersion()\r\n\t\t\t\t\t.then( version => {\r\n\t\t\t\t\t\t// version = FIRMWARE_COMPATIBILITY;\r\n\t\t\t\t\t\tif( parseFloat(version) >= FIRMWARE_COMPATIBILITY ) {\r\n\t\t\t\t\t\t\tthis.keepalive = this._keepalive(this);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis._error(\"Firmware not compatible: please update your SBrick.\");\r\n\t\t\t\t\t\t\tthis.disconnect();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch( e => { this._error(e) } );\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Disconnect the SBrick\r\n\t\t* @returns {promise returning undefined}\r\n\t\t*/\r\n\t\tdisconnect() {\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( this.isConnected() ) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject('Not connected');\r\n\t\t\t\t}\r\n\t\t\t} ).then( ()=> {\r\n\t\t\t\treturn this.stopAll()\r\n\t\t\t\t.then( ()=> {\r\n\t\t\t\t\tclearInterval( this.keepalive );\r\n\t\t\t\t\treturn this.webbluetooth.disconnect();\r\n\t\t\t\t} );\r\n\t\t\t} )\r\n\t\t\t.catch( e => { this._error(e) } );\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Check if the SBrick is connected to the browser\r\n\t\t* @returns {boolean}\r\n\t\t*/\r\n\t\tisConnected() {\r\n\t\t\treturn this.webbluetooth && this.webbluetooth.isConnected();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick's model number\r\n\t\t* @returns {promise returning string}\r\n\t\t*/\r\n\t\tgetModelNumber() {\r\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_MODELNUMBER);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick's firmware version\r\n\t\t* @returns {promise returning string}\r\n\t\t*/\r\n\t\tgetFirmwareVersion() {\r\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_FIRMWAREREVISION);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick's hardware version\r\n\t\t* @returns {promise returning string}\r\n\t\t*/\r\n\t\tgetHardwareVersion() {\r\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_HARDWAREREVISION);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick's software version\r\n\t\t* @returns {promise returning string}\r\n\t\t*/\r\n\t\tgetSoftwareVersion() {\r\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_SOFTWAREREVISION);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick's manufacturer's name\r\n\t\t* @returns {promise returning string}\r\n\t\t*/\r\n\t\tgetManufacturerName() {\r\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_MANUFACTURERNAME);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Send drive command\r\n\t\t* @param {object} portObj - {portId, direction, power}\r\n\t\t*\t\tportId: {number} The index (0-3) of the port to update in the this.ports array\r\n\t\t*\t\tdirection: {hexadecimal number} The drive direction (0x00, 0x01 - you can use the constants SBrick.CLOCKWISE and SBrick.COUNTERCLOCKWISE)\r\n\t\t*\t\tpower: {number} - The power level for the drive command 0-255\r\n\t\t* @returns {promise returning object} - Returned object: portId, direction, power\r\n\t\t*/\r\n\t\tdrive( portObj ) {\r\n\t\t\tif (typeof portObj !== 'object') {\r\n\t\t\t\t// the old version with 3 params was used\r\n\t\t\t\tportObj = {\r\n\t\t\t\t\tportId: \t  arguments[0],\r\n\t\t\t\t\tdirection: \targuments[1],\r\n\t\t\t\t\tpower: \t\t  arguments[2]\r\n\t\t\t\t};\r\n\t\t\t\tthis._log('Calling drive with 3 arguments is deprecated: use 1 object {portId, direction, power} instead.');\r\n\t\t\t}\r\n\r\n\t\t\tconst portId \t\t= portObj.portId,\r\n\t\t\t\t\t\tdirection = portObj.direction || CLOCKWISE,\r\n\t\t\t\t\t\tpower \t\t= ( portObj.power === undefined ) ? MAX : portObj.power\r\n\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( portId !== undefined && direction !== undefined && power !== undefined ) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet msg = 'Wrong input: please specify ';\r\n\t\t\t\t\tif (portId === undefined) { msg += 'portId'; }\r\n\t\t\t\t\tif (power === undefined) {\r\n\t\t\t\t\t\tif (portId === undefined) {\tmsg += ' and'; }\r\n\t\t\t\t\t\tmsg += ' power';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treject(msg);\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t\t.then( ()=> {\r\n\t\t\t\treturn this._pvm( { portId:portId, mode:OUTPUT } );\r\n\t\t\t})\r\n\t\t\t.then( () => {\r\n\t\t\t\tlet port = this.ports[portId];\r\n\r\n\t\t\t\tport.power     = Math.min(Math.max(parseInt(Math.abs(power)), MIN), MAX);\r\n\t\t\t\tport.direction = direction ? COUNTERCLOCKWISE : CLOCKWISE;\r\n\r\n\t\t\t\tif( !port.busy ) {\r\n\t\t\t\t\tport.busy = true;\r\n\t\t\t\t\tthis.queue.add( () => {\r\n\t\t\t\t\t\tport.busy = false;\r\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\r\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\r\n\t\t\t\t\t\t\tnew Uint8Array([ CMD_DRIVE, PORTS[portId].portId, port.direction, port.power ])\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then( () => {\r\n\t\t\t\t// all went well, send event and return the settings we just applied\r\n\t\t\t\tlet portData = this._getPortData(portId);\r\n\t\t\t\tthis._sendPortChangeEvent(portData);\r\n\t\t\t\t// return the new settings to the promise\r\n\t\t\t\treturn portData;\r\n\t\t\t})\r\n\t\t\t.catch( e => { this._error(e) } );\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Send quickDrive command\r\n\t\t* @param {array} portObjs - An array with a setting objects {port, direction, power} for every port you want to update\r\n\t\t* @returns {promise returning array} - Returned array: [{portId, direction, power}, {...}, {...}, {...}]\r\n\t\t*/\r\n\t\tquickDrive( portObjs ) {\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( Array.isArray(portObjs) ) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject('Wrong input: quickDrive expects array');\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t\t.then( ()=> {\r\n\t\t\t\tlet array = [];\r\n\t\t\t\tlet allPorts = this._getPorts();\r\n\t\t\t\tallPorts.forEach( (portId) => {\r\n\t\t\t\t\tarray.push( {\r\n\t\t\t\t\t\tportId: portId,\r\n\t\t\t\t\t\tmode: OUTPUT\r\n\t\t\t\t\t} );\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log(array);\r\n\t\t\t\treturn this._pvm( array );\r\n\t\t\t})\r\n\t\t\t.then( ()=> {\r\n\t\t\t\t// updating ports status\r\n\t\t\t\tportObjs.forEach( (portObj) => {\r\n\t\t      let portId = parseInt( portObj.portId );\r\n\t\t      if (isNaN(portId)) {\r\n\t\t        // the old version with port instead of portId was used\r\n\t\t        portId = parseInt( portObj.port );\r\n\t\t        this._log('object property port is deprecated. use portId instead.');\r\n\t\t      }\r\n\t\t      let port       = this.ports[portId];\r\n\t\t      port.power     = Math.min(Math.max(parseInt(Math.abs(portObj.power)), MIN), MAX);\r\n\t\t      port.direction = portObj.direction ? COUNTERCLOCKWISE : CLOCKWISE;\r\n\t\t    });\r\n\t\t\t\t// send command\r\n\t\t\t\tif(this._portsIdle(this._getPorts())) {\r\n\t\t\t\t\t// set all ports busy\r\n\t\t      this._setPortsBusy(this._getPorts(), true);\r\n\t\t\t\t\tthis.queue.add( () => {\r\n\t\t\t\t\t\tlet command = [];\r\n\t\t\t\t\t\tthis.ports.forEach( (port, index) => {\r\n\t\t\t\t\t\t\t\tport.busy = false;\r\n\t\t\t\t\t\t\t\tcommand.push( parseInt( parseInt(port.power/MAX*MAX_QD).toString(2) + port.direction, 2 ) );\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\r\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_QUICKDRIVE,\r\n\t\t\t\t\t\t\tnew Uint8Array( command )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then( () => {\r\n\t\t\t\t// all went well, return an array with the channels and the settings we just applied\r\n\t\t\t\tlet returnData = [];\r\n\r\n\t\t\t\tportObjs.forEach((portObj) => {\r\n\t\t\t\t\tlet portId = portObj.portId;\r\n\t\t\t\t\tif (portObj.port) {\r\n\t\t\t\t\t\t// it uses the old syntax\r\n\t\t\t\t\t\tportId = parseInt( portObj.port );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//send event for this port\r\n\t\t\t\t\tlet portData = this._getPortData(portId);\r\n\t\t\t\t\tthis._sendPortChangeEvent(portData);\r\n\t\t\t\t\treturnData.push(portData);\r\n\t\t\t\t});\r\n\t\t\t\treturn returnData;\r\n\t\t\t})\r\n\t\t\t.catch( e => { this._error(e) } );\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Stop a port\r\n\t\t* @param {number | array} portIds - The number or array of numbers of channels to stop\r\n\t\t* @returns {promise}\r\n\t\t*/\r\n\t\tstop( portIds ) {\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( portIds!==null ) {\r\n\t\t\t\t\tif( !Array.isArray(portIds) ) {\r\n\t\t\t\t\t\tportIds = [ portIds ];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject('wrong input');\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t\t.then( ()=> {\r\n\t\t\t\tlet array = [];\r\n\t\t\t\tportIds.forEach( (portId) => {\r\n\t\t\t\t\tarray.push( {\r\n\t\t\t\t\t\tportId: portId,\r\n\t\t\t\t\t\tmode: BREAK\r\n\t\t\t\t\t} );\r\n\t\t\t\t});\r\n\t\t\t\treturn this._pvm( array );\r\n\t\t\t})\r\n\t\t\t.then( ()=> {\r\n\t\t\t\tlet portsToUpdate = [];\r\n\t\t\t\t// update object values and build the command\r\n\t\t\t\tportIds.forEach( (portId) => {\r\n\t\t\t\t\tlet port = this.ports[portId];\r\n\t\t\t\t\tport.power = 0;\r\n\t\t\t\t\tif(!port.busy) {\r\n\t\t\t\t\t\tportsToUpdate.push(portId);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif( portsToUpdate.length ) {\r\n\t\t\t\t\tthis._setPortsBusy(portsToUpdate, true);\r\n\t\t\t\t\tthis.queue.add( () => {\r\n\t\t\t\t\t\tthis._setPortsBusy(portsToUpdate, false);\r\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\r\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\r\n\t\t\t\t\t\t\tnew Uint8Array( [ CMD_BREAK ].concat(portsToUpdate) )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then( () => {\r\n\t\t\t\t// all went well, return an array with the channels and the settings we just applied\r\n\t\t\t\tlet returnData = [];\r\n\t\t\t\tportIds.forEach((portId) => {\r\n\t\t\t\t\t// send event for this port\r\n\t\t\t\t\tlet portData = this._getPortData(portId);\r\n\t\t\t\t\tthis._sendPortChangeEvent(portData);\r\n\t\t\t\t\treturnData.push(portData);\r\n\t\t\t\t});\r\n\t\t\t\treturn returnData;\r\n\t\t\t})\r\n\t\t\t.catch( e => { this._error(e) } );\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Stop all ports\r\n\t\t* @returns {promise}\r\n\t\t*/\r\n\t\tstopAll() {\r\n\t\t\treturn this.stop( this._getPorts() );\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Get battery percentage\r\n\t\t* @returns {promise returning number}\r\n\t\t*/\r\n\t\tgetBattery() {\r\n\t\t\treturn this._volt()\r\n\t\t\t.then( volt => {\r\n\t\t\t\treturn parseInt( Math.abs( volt / MAX_VOLT * 100 ) );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Get sbrick's temperature in degrees Celsius (default) or Fahrenheit\r\n\t\t* @param {boolean} fahrenheit - If true, temperature is returned in Fahrenheit\r\n\t\t* @returns {promise returning number}\r\n\t\t*/\r\n\t\tgetTemp( fahrenheit = false) {\r\n\t\t\treturn this._temp()\r\n\t\t\t.then( temp => {\r\n\t\t\t\tlet result = 0;\r\n\t\t\t\tif( fahrenheit ) {\r\n\t\t\t\t\tresult = temp * 9/5 + 32;\r\n\t\t\t\t\tresult = result; // ' °F';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult = temp; // ' °C';\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Read sensor data on a specific PORT\r\n\t\t* @param {hexadecimal} portId - The index of the port in the this.ports array\r\n\t\t* @param {string} sensorSeries - not implemented yet - in the future it will manage different sensor series (wedo, EV3, NXT, ...)\r\n\t\t* @returns {promise} - sensor measurement Object (structure depends on the sensor type)\r\n\t\t*/\r\n\t\tgetSensor( portId, sensorSeries ) {\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( portId !== null ) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject('wrong input');\r\n\t\t\t\t}\r\n\t\t\t}).then( () => {\r\n\t\t\t\tlet newPortStatus = { portId: portId, mode:INPUT };\r\n\t\t\t\t// reset the port if is in \"break mode\" (short circuited) or driving before activate PVM\r\n\t\t\t\tif(this.ports[portId].mode===BREAK || this.ports[portId].power!=0) {\r\n\t\t\t\t\treturn this.drive(portId,CLOCKWISE,0)\r\n\t\t\t\t\t.then( () => {\r\n\t\t\t\t\t\treturn this._pvm( newPortStatus );\r\n\t\t\t\t\t} );\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this._pvm( newPortStatus );\r\n\t\t\t\t}\r\n\t\t\t}).then( () => {\r\n\t\t\t\tlet channels = this._getPortChannels(portId);\r\n\t\t\t\treturn this._adc([CMD_ADC_VOLT].concat(channels))\r\n\t\t\t\t.then( data => {\r\n\t\t\t\t\tlet arrayData = [];\r\n\t\t\t\t\tfor (let i = 0; i < data.byteLength; i+=2) {\r\n\t\t\t\t\t\tarrayData.push( data.getUint16(i, true) );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet sensorData = {\r\n\t\t\t\t\t\ttype: 'unknown',\r\n\t\t\t\t\t\tvoltage: arrayData[0] >> 4,\r\n\t\t\t\t\t\tch0_raw: arrayData[1] >> 4,\r\n\t\t\t\t\t\tch1_raw: arrayData[2] >> 4\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Sensor Type Management\r\n\t\t\t\t\tswitch(sensorSeries) {\r\n\t\t\t\t\t\tcase \"wedo\":\r\n\t\t\t\t\t\t\tlet typeId  = Math.round( ( sensorData.ch0_raw / sensorData.voltage ) * 255 );\r\n\t\t\t\t\t\t\tlet value = Math.round( ( sensorData.ch1_raw / sensorData.voltage ) * 255 );\r\n\t\t\t\t\t\t\tsensorData.type  = ( typeId >= 48 && typeId <= 50 ) ? \"tilt\" : \"motion\";\r\n\t\t\t\t\t\t\tsensorData.value = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tsensorData.value = sensorData.ch1_raw / sensorData.voltage;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn sensorData;\r\n\t\t\t\t} );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Helper function to invert CW in CCW and vice versa\r\n\t\t* @param {hex number} direction\r\n\t\t*/\r\n\t\tinvDir( direction ) {\r\n\t\t\treturn direction ? CLOCKWISE : COUNTERCLOCKWISE;\r\n\t\t}\r\n\r\n\r\n\t\t// PRIVATE FUNCTIONS\r\n\r\n\t\t/**\r\n\t\t* Read some common Blutooth devices informations about the SBrick\r\n\t\t* @param {hexadecimal|string} uuid_characteristic\r\n\t\t* @returns {promise}\r\n\t\t*/\r\n\t\t_deviceInfo( uuid_characteristic ) {\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( typeof this.SERVICES[UUID_SERVICE_DEVICEINFORMATION].characteristics[uuid_characteristic] != 'undefined' ) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject('Wrong input');\r\n\t\t\t\t}\r\n\t\t\t} ).then( () => {\r\n\t\t\t\treturn this.webbluetooth.readCharacteristicValue( uuid_characteristic )\r\n\t\t\t\t.then(data => {\r\n\t\t\t\t\tlet str = \"\";\r\n\t\t\t\t\tfor (let i = 0 ; i < data.byteLength ; i++) {\r\n\t\t\t\t\t\tstr += String.fromCharCode(data.getUint8(i));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn str;\r\n\t\t\t\t})\r\n\t\t\t\t.catch( e => { this._error(e) } );\r\n\t\t\t})\r\n\t\t\t.catch( e => { this._error(e) } );\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Keep the connection alive, preventing the SBrick internal watchdog (500 millisec by default) to close it\r\n\t\t*/\r\n\t\t_keepalive() {\r\n\t\t\treturn setInterval( () => {\r\n\t\t\t\tif( !this.isConnected() ) {\r\n\t\t\t\t\tthis._log('Connection lost');\r\n\t\t\t\t\tclearInterval( this.keepalive );\r\n\t\t\t\t} else if( this.queue.getQueueLength() === 0 ) {\r\n\t\t\t\t\tthis.queue.add( () => {\r\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\r\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\r\n\t\t\t\t\t\t\tnew Uint8Array( [ CMD_ADC, CMD_ADC_TEMP ] )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}, T_KA);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Read the ADC sensor \"variables\" where each specific channel values are stored\r\n\t\t* every PORT has 2 channels so use CHANNEL[0-7] to read sensor data\r\n\t\t* the remaining 2 channels are for the chip TEMPERATURE (0x08) and battery VOLTAGE (0x09)\r\n\t\t* @param {array} array_channels - an array of channels CHANNEL[0-7], TEMPERATURE or VOLTAGE\r\n\t\t* @returns {promise} - voltage measurement\r\n\t\t*/\r\n\t\t_adc( array_channels ) {\r\n\t\t\treturn this.queue.add( () => {\r\n\t\t\t\tlet ports = Array.isArray(array_channels) ? array_channels : [array_channels];\r\n\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\r\n\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\r\n\t\t\t\t\tnew Uint8Array([CMD_ADC].concat(ports))\r\n\t\t\t\t).then(() => {\r\n\t\t\t\t\treturn this.webbluetooth.readCharacteristicValue(UUID_CHARACTERISTIC_REMOTECONTROL)\r\n\t\t\t\t\t.then(data => {\r\n\t\t\t\t\t\treturn data;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Enable \"Power Voltage Measurements\" (five times a second) on a specific PORT (on both CHANNELS)\r\n\t\t* the values are stored in internal SBrick variables, to read them use _adc()\r\n\t\t* @param {array} portObjs - an array of port status objects { portId, mode: INPUT-OUTPUT}\r\n\t\t* @returns {promise} - undefined\r\n\t\t*/\r\n\t\t_pvm( portObjs ) {\r\n\t\t\treturn new Promise( (resolve, reject) => {\r\n\t\t\t\tif( portObjs !== null ) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject('wrong input');\r\n\t\t\t\t}\r\n\t\t\t} ).then( ()=> {\r\n\t\t\t\tif( !Array.isArray(portObjs) ) {\r\n\t\t\t\t\tportObjs = [ portObjs ];\r\n\t\t\t\t}\r\n\t\t\t\tlet update_pvm = false;\r\n\t\t\t\tportObjs.forEach( (portObj) => {\r\n\t\t\t\t\tlet portId = portObj.portId;\r\n\t\t\t\t\tlet mode = portObj.mode;\r\n\t\t\t\t\tif( this.ports[portId].mode != mode ) {\r\n\t\t\t\t\t\tthis.ports[portId].mode = mode;\r\n\t\t\t\t\t\tupdate_pvm = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(update_pvm) {\r\n\t\t\t\t\tlet command = [CMD_PVM];\r\n\t\t\t\t\tlet srt = \"\";\r\n\t\t\t\t\tthis.ports.forEach( (port, i) => {\r\n\t\t\t\t\t\tif(port.mode==INPUT) {\r\n\t\t\t\t\t\t\tlet channels = this._getPortChannels(i);\r\n\t\t\t\t\t\t\tcommand.push(channels[0]);\r\n\t\t\t\t\t\t\tcommand.push(channels[1]);\r\n\t\t\t\t\t\t\tsrt += \" PORT\"+ i + \" (CH\" + channels[0] + \" CH\" + channels[1]+\")\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.queue.add( () => {\r\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\r\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\r\n\t\t\t\t\t\t\tnew Uint8Array(command)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.then( () => {\r\n\t\t\t\t\t\t\tthis._log( \"PVM set\" + ( srt==\"\" ? \" OFF\" : srt ) );\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// PVM has a delay before start to collect actual data\r\n\t\t\t\t\treturn this._delay(T_PVM);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick battery voltage\r\n\t\t* @returns {number} - voltage in Volts\r\n\t\t*/\r\n\t\t_volt() {\r\n\t\t\treturn this._adc(CMD_ADC_VOLT).then( data => {\r\n\t\t\t\tlet volt = data.getInt16( 0, true );\r\n\t\t\t\treturn parseFloat( volt * 0.83875 / 2047.0 ); // V;\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the SBrick internal temperature\r\n\t\t* @returns {number} - temperature in Celsius\r\n\t\t*/\r\n\t\t_temp() {\r\n\t\t\treturn this._adc(CMD_ADC_TEMP).then( data => {\r\n\t\t\t\tlet temp = data.getInt16( 0, true );\r\n\t\t\t\treturn parseFloat(temp / 118.85795 - 160); // °C;\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Helper function to get ports Ids\r\n\t\t* @returns {boolean}\r\n\t\t*/\r\n\t\t_getPorts() {\r\n\t\t\treturn PORTS.map( function(obj) {return obj.portId;} );\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Helper function to find a port channel numbers\r\n\t\t* @param {number} portId - The index of the port in the this.ports array\r\n\t\t* @returns {array} - hexadecimal numbers of both channels\r\n\t\t*/\r\n\t\t_getPortChannels( portId ) {\r\n\t\t\treturn PORTS[portId].channelsId;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Get the settings of a specific port\r\n\t\t* @returns {object} portId, direction, power\r\n\t\t*/\r\n\t\t_getPortData(portId) {\r\n\t\t\tconst port = this.ports[portId],\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tportId:    portId,\r\n\t\t\t\t\tdirection: port.direction,\r\n\t\t\t\t\tpower:     port.power,\r\n\t\t\t\t\tmode:      port.mode\r\n\t\t\t\t};\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Error management\r\n\t\t* @param {string} msg - message to print or throw\r\n\t\t*/\r\n\t\t_error( msg ) {\r\n\t\t\tif(this._debug) {\r\n\t\t\t\tconsole.debug(msg);\r\n\t\t\t} else {\r\n\t\t\t\tthrow msg;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Log\r\n\t\t* @param {string} msg - message to print\r\n\t\t*/\r\n\t\t_log( msg ) {\r\n\t\t\tif(this._debug) {\r\n\t\t\t\tconsole.log(msg);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Delay promise\r\n\t\t* @param {number} t - time in milliseconds\r\n\t\t*/\r\n\t\t_delay(t) {\r\n\t\t\treturn new Promise(function(resolve) {\r\n\t\t \t\tsetTimeout(resolve, t)\r\n\t\t \t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Trigger event on body to notify listeners that a port's values have changed\r\n\t\t* @param {object} portData - The data ({portId, power, direction}) for the port that was changed\r\n\t\t* @returns {undefined}\r\n\t\t*/\r\n\t\t_sendPortChangeEvent( portData ) {\r\n\t\t\tconst event = new CustomEvent('portchange.sbrick', {detail: portData});\r\n\t\t\tdocument.body.dispatchEvent(event);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Check if ports are busy\r\n\t\t* @returns {boolean}git\r\n\t\t*/\r\n\t\t_portsIdle(ports) {\r\n\t\t\tlet allAreIdle = true;\r\n\t\t\tports.forEach( (port) => {\r\n\t\t\t\tif (this.ports[port].busy) {\r\n\t\t\t\t\tallAreIdle = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn allAreIdle;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Set all ports to busy\r\n\t\t* @returns {undefined}\r\n\t\t*/\r\n\t\t_setPortsBusy(ports, status) {\r\n\t\t\tports.forEach( (port) => {\r\n\t\t\t\tthis.ports[port].busy = status;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t}\r\n\r\n\treturn SBrick;\r\n\r\n})();\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { SBrick } from './sbrick.js';\r\n//const SBrick = require('sbrick-protocol');\r\n\r\n//let SBRICK2 = new SBrick('SBrick');\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value1: 0,\r\n      value2: 0\r\n    };\r\n    this.SBRICK2 = new SBrick('SBrick');\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('mount')\r\n  }\r\n\r\n  connectBt= () => {\r\n    const ID_SBRICK                             = \"SBrick\";\r\n    const FIRMWARE_COMPATIBILITY                 = 4.17;\r\n\r\n    const UUID_SERVICE_DEVICEINFORMATION        = \"device_information\";\r\n    const UUID_CHARACTERISTIC_MODELNUMBER       = \"model_number_string\";\r\n    const UUID_CHARACTERISTIC_FIRMWAREREVISION  = \"firmware_revision_string\";\r\n    const UUID_CHARACTERISTIC_HARDWAREREVISION  = \"hardware_revision_string\";\r\n    const UUID_CHARACTERISTIC_SOFTWAREREVISION  = \"software_revision_string\";\r\n    const UUID_CHARACTERISTIC_MANUFACTURERNAME  = \"manufacturer_name_string\";\r\n\r\n    const UUID_SERVICE_REMOTECONTROL            = \"4dc591b0-857c-41de-b5f1-15abda665b0c\";\r\n    const UUID_CHARACTERISTIC_REMOTECONTROL     = \"02b8cbcc-0e25-4bda-8790-a15f53e6010f\";\r\n    const UUID_CHARACTERISTIC_QUICKDRIVE        = \"489a6ae0-c1ab-4c9c-bdb2-11d373c1b7fb\";\r\n\r\n    const services = {\r\n      [UUID_SERVICE_DEVICEINFORMATION] : {\r\n        name : \"Device Information\",\r\n        characteristics : {\r\n          [UUID_CHARACTERISTIC_MODELNUMBER] : {\r\n            name : \"Model Number String\"\r\n          },\r\n          [UUID_CHARACTERISTIC_FIRMWAREREVISION] : {\r\n            name : \"Firmware Revision String\"\r\n          },\r\n          [UUID_CHARACTERISTIC_HARDWAREREVISION] : {\r\n            name : \"Hardware Revision String\"\r\n          },\r\n          [UUID_CHARACTERISTIC_SOFTWAREREVISION] : {\r\n            name : \"Software Revision String\"\r\n          },\r\n          [UUID_CHARACTERISTIC_MANUFACTURERNAME] : {\r\n            name : \"Manufacturer Name String\"\r\n          }\r\n        }\r\n      },\r\n      [UUID_SERVICE_REMOTECONTROL] : {\r\n        name : \"Remote Control\",\r\n        characteristics : {\r\n          [UUID_CHARACTERISTIC_REMOTECONTROL] : {\r\n            name : \"Quick Drive\"\r\n          },\r\n          [UUID_CHARACTERISTIC_QUICKDRIVE] : {\r\n            name : \"Remote Control\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  \tconst CMD_DRIVE     = 0x01; // Drive command\r\n    const PORTS = [\r\n      { portId: 0x00, channelsId: [ 0x00, 0x01 ]},\r\n      { portId: 0x01, channelsId: [ 0x02, 0x03 ]},\r\n      { portId: 0x02, channelsId: [ 0x04, 0x05 ]},\r\n      { portId: 0x03, channelsId: [ 0x06, 0x07 ]}\r\n    ];\r\n    // Direction\r\n    const CLOCKWISE        = 0x00; // Clockwise\r\n    const COUNTERCLOCKWISE = 0x01; // Counterclockwise\r\n\r\n    let options = {};\r\n      options.acceptAllDevices = true;\r\n      options.optionalServices = ['4dc591b0-857c-41de-b5f1-15abda665b0c']\r\n\r\n    console.log('Requesting Bluetooth Device...');\r\n    //console.log('with ' + JSON.stringify(options));\r\n    navigator.bluetooth.requestDevice(options, services\r\n      // {\r\n      //   filters: [{\r\n      //     services: ['device_information']\r\n      //   }]\r\n      // }\r\n    )\r\n        .then(device => {\r\n          console.log('id:' ,device.id, 'name:', device.name)\r\n          return device.gatt.connect();\r\n        })\r\n        .then(server => {\r\n          console.log('getting services', server)\r\n          return server.getPrimaryService('4dc591b0-857c-41de-b5f1-15abda665b0c')\r\n        })\r\n        .then(services => {\r\n          console.log(services)\r\n          return services.getCharacteristics()\r\n        }).then(ch => {\r\n          console.log(ch[0]);\r\n          //return ch.writeValue()\r\n        })\r\n  }\r\n\r\n  disconnectBt= (SBRICK1) => {\r\n    // let options = {};\r\n    // options.acceptAllDevices = true;\r\n    //\r\n    // console.log('Requesting Bluetooth Device...');\r\n    // console.log('with ' + JSON.stringify(options));\r\n    // navigator.bluetooth.requestDevice(options)\r\n    //   .then(device => {\r\n    //     device.gatt.connect().then((aa) => console.log('connectedd', aa))\r\n    //\r\n    //     console.log('> Name:             ' + device.name);\r\n    //     console.log('> Id:               ' + device.id);\r\n    //     //console.log('> Connected:        ' + device.gatt.connected);\r\n    //   })\r\n    this.SBRICK2.disconnect();\r\n  }\r\n\r\n  getCharacteristic2 = () => {\r\n    this.SBRICK2.connect().then(() => console.log('connect'))\r\n\r\n  }\r\n\r\n  start1 = (val) => {\r\n    this.SBRICK2.drive( 0x00, this.SBRICK2.CW, val )\r\n  }\r\n  start2 = (val) => {\r\n    this.SBRICK2.drive( 0x00, this.SBRICK2.CW, val )\r\n  }\r\n  start3 = (val ) => {\r\n    this.SBRICK2.drive( 0x00, this.SBRICK2.CW, val )\r\n  }\r\n\r\n  stop = () => {\r\n    this.SBRICK2.drive( 0x00, this.SBRICK2.CW, 0 )\r\n  }\r\n\r\n  fs = () => {\r\n    this.openFullscreen()\r\n  }\r\n\r\nopenFullscreen() {\r\n  var elem = document.documentElement;\r\n  if (elem.requestFullscreen) {\r\n    elem.requestFullscreen();\r\n  } else if (elem.mozRequestFullScreen) { /* Firefox */\r\n    elem.mozRequestFullScreen();\r\n  } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n    elem.webkitRequestFullscreen();\r\n  } else if (elem.msRequestFullscreen) { /* IE/Edge */\r\n    elem.msRequestFullscreen();\r\n  }\r\n}\r\n\r\ncloseFullscreen() {\r\n  if (document.exitFullscreen) {\r\n    document.exitFullscreen();\r\n  } else if (document.mozCancelFullScreen) { /* Firefox */\r\n    document.mozCancelFullScreen();\r\n  } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n    document.webkitExitFullscreen();\r\n  } else if (document.msExitFullscreen) { /* IE/Edge */\r\n    document.msExitFullscreen();\r\n  }\r\n}\r\n\r\n  handleOnChange = (e) => {\r\n    //console.log(e.target.value)\r\n    this.setState({value1: e.target.value})\r\n    console.log(e.target.value)\r\n    let direction = e.target.value < 0 ? this.SBRICK2.CCW : this.SBRICK2.CW\r\n    this.SBRICK2.drive( 0x01, direction, e.target.value )\r\n  }\r\n  handleOnChangeS1 = (e) => {\r\n    //console.log(e.target.value)\r\n    this.setState({value2: e.target.value})\r\n    console.log(e.target.value)\r\n    let direction = e.target.value < 0 ? this.SBRICK2.CW : this.SBRICK2.CCW\r\n    this.SBRICK2.drive( 0x03, direction, e.target.value )\r\n  }\r\n  handleOnChange2 = (e) => {\r\n    //console.log(e.target.value)\r\n    this.SBRICK2.drive( 0x03, this.SBRICK2.CW, e.target.value )\r\n  }\r\n\r\n  setSbrick1 = (val) => {\r\n    //console.log(e.target.value)\r\n    //this.setState({value: e.target.value})\r\n    this.SBRICK2.drive( 0x01, this.SBRICK2.CW, val )\r\n  }\r\n\r\n  setSbrick2 = (val) => {\r\n    //console.log(e.target.value)\r\n    //this.setState({value: e.target.value})\r\n    this.SBRICK2.drive( 0x03, this.SBRICK2.CW, val )\r\n  }\r\n\r\n  render() {\r\n    console.log('render')\r\n    //let SBRICK1 = new SBrick(); // create a new SBrick object\r\n  //  let SBRICK2 = new SBrick('SBrick'); // create a new SBrick object\r\n\r\n  const inputStyle = {\r\n\r\n    transformOorigin: \"75px 75px\",\r\n    transform: \"rotate(-90deg)\",\r\n    boxShadow: \"inset 0px 1px 3px rgba(0, 0, 0, 0.3)\",\r\n    height: \"20px !important\",\r\n    width: \"200px\"\r\n  }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div style={{margin: \"0 0 100px 0 \"}}>\r\n          <p>BT TEST</p>\r\n          {/*<button onClick={() => this.start1(20)}>start50</button>*/}\r\n          {/*<button onClick={() => this.start2(100)}>start100</button>*/}\r\n          <button onClick={() => this.start3(255)}>lights on</button>\r\n          <button onClick={() => this.stop()}>lights off</button>\r\n          <button onClick={() => this.getCharacteristic2()}>connect Sbrick</button>\r\n          <button onClick={() => this.fs()}>full screen</button>\r\n          <button onClick={() => this.closeFullscreen()}>close full screen</button>\r\n        </div>\r\n        <div style={{display: 'flex', justifyContent: \"center\", width: \"100%\"}}>\r\n          <div style={{width: '30%'}}>\r\n          <input style={inputStyle}\r\n                 name='SBrick2'\r\n                 type='range'\r\n                 min=\"-255\"\r\n                 max=\"255\"\r\n                 value={this.state.value2}\r\n                 onChange={this.handleOnChangeS1}\r\n            //onTouchStart={() => this.setState({value: 0})}\r\n                 onTouchEnd={() => {\r\n                   this.setSbrick2(0);\r\n                   this.setState({value2: 0});\r\n                 }}\r\n                 onMouseUp={() => {\r\n                   this.setSbrick2(0);\r\n                   this.setState({value2: 0});\r\n                 }}\r\n            //onMouseDown={() => this.setState({value: 0})}\r\n          />\r\n          </div>\r\n          <div style={{width: '30%'}}>\r\n          <input style={inputStyle}\r\n                 name='SBrick'\r\n                 type='range'\r\n                 min=\"-255\"\r\n                 max=\"255\"\r\n                 value={this.state.value1}\r\n                 onChange={this.handleOnChange}\r\n            //onTouchStart={() => this.setState({value: 0})}\r\n                 onTouchEnd={() => {\r\n                   this.setSbrick1(0);\r\n                   this.setState({value1: 0});\r\n                 }}\r\n                 onMouseUp={() => {\r\n                   this.setSbrick1(0);\r\n                   this.setState({value1: 0});\r\n                 }}\r\n            //onMouseDown={() => this.setState({value: 0})}\r\n          />\r\n          </div>\r\n          {/*<input name=\"Sbrick2\"*/}\r\n            {/*type=\"number\"*/}\r\n            {/*onChange={this.handleOnChange2}*/}\r\n          {/*/>*/}\r\n          {/*<p>{this.state.value}</p>*/}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//\r\n//pionowe\r\n// .slider-wrapper {\r\n//   display: inline-block;\r\n//   width: 20px;\r\n//   height: 150px;\r\n//   padding: 0;\r\n// }\r\n// Then comes the style information for the <input> element within the reserved space:\r\n// .slider-wrapper input {\r\n//   width: 150px;\r\n//   height: 20px;\r\n//   margin: 0;\r\n//   transform-origin: 75px 75px;\r\n//   transform: rotate(-90deg);\r\n// }\r\n/*\r\n * Copyright (c) 2016-17 Francesco Marino\r\n *\r\n * @author Francesco Marino <francesco@360fun.net>\r\n * @website www.360fun.net\r\n *\r\n * This is just a basic Class to start playing with the new Web Bluetooth API,\r\n * specifications can change at any time so keep in mind that all of this is\r\n * mostly experimental! ;)\r\n *\r\n * Check your browser and platform implementation status first\r\n * https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n//\r\n// let WebBluetooth = (function() {\r\n//   'use strict';\r\n//\r\n//   // UTF-8\r\n//   let encoder = new TextEncoder('utf-8');\r\n//   let decoder = new TextDecoder('utf-8');\r\n//\r\n//   class WebBluetooth {\r\n//\r\n//     constructor() {\r\n//       this.device           = null;\r\n//       this.server           = null;\r\n//       this._characteristics = new Map();\r\n//       this._debug           = false;\r\n//     }\r\n//\r\n//     isConnected() {\r\n//       return this.device && this.device.gatt.connected;\r\n//     }\r\n//\r\n//     connect(options,services) {\r\n//       return navigator.bluetooth.requestDevice(options)\r\n//         .then(device => {\r\n//           this.device = device;\r\n//           this._log('Connected to device named \"' + device.name + '\" with ID \"' + device.id + '\"');\r\n//           return device.gatt.connect();\r\n//         })\r\n//         .then(server => {\r\n//           this.server = server;\r\n//           return Promise.all(\r\n//             Object.keys(services).map( serviceId => {\r\n//               return server.getPrimaryService(serviceId).then(service => {\r\n//                 return Promise.all(\r\n//                   Object.keys(services[serviceId].characteristics).map( characteristicId => {\r\n//                     return this._cacheCharacteristic(service, characteristicId)\r\n//                       .then( () => {\r\n//                         this._log('Found characteristic \"' + characteristicId + '\"');\r\n//                       })\r\n//                       .catch( e => { this._error('Characteristic \"' + characteristicId + '\" NOT found') } );\r\n//                   })\r\n//                 );\r\n//               })\r\n//                 .then( () => {\r\n//                   this._log('Found service \"' + serviceId + '\"');\r\n//                 })\r\n//                 .catch( e => { this._error('Service \"' + serviceId + '\"') } );\r\n//             })\r\n//           );\r\n//         });\r\n//     }\r\n//\r\n//     disconnect() {\r\n//       return new Promise( (resolve, reject) =>  {\r\n//           if( this.isConnected() ) {\r\n//             resolve();\r\n//           } else {\r\n//             reject('Device not connected');\r\n//           }\r\n//         }\r\n//       ).then( ()=> {\r\n//         this._log('Device disconnected')\r\n//         return this.device.gatt.disconnect();\r\n//       }).catch( e => { this._error(e) } );\r\n//     }\r\n//\r\n//     readCharacteristicValue(characteristicUuid) {\r\n//       return new Promise( (resolve, reject) =>  {\r\n//           if( this.isConnected() ) {\r\n//             resolve();\r\n//           } else {\r\n//             reject('Device not connected');\r\n//           }\r\n//         }\r\n//       ).then( ()=> {\r\n//         let characteristic = this._characteristics.get(characteristicUuid);\r\n//         return characteristic.readValue()\r\n//           .then(value => {\r\n//             // In Chrome 50+, a DataView is returned instead of an ArrayBuffer.\r\n//             value = value.buffer ? value : new DataView(value);\r\n//             this._log('READ', characteristic.uuid, value);\r\n//             return value;\r\n//           });\r\n//       })\r\n//         .catch( e => { this._error(e) } );\r\n//     }\r\n//\r\n//     writeCharacteristicValue(characteristicUuid, value) {\r\n//       return new Promise( (resolve, reject) =>  {\r\n//           if( this.isConnected() ) {\r\n//             resolve();\r\n//           } else {\r\n//             reject('Device not connected');\r\n//           }\r\n//         }\r\n//       ).then( ()=> {\r\n//         let characteristic = this._characteristics.get(characteristicUuid);\r\n//         this._log('WRITE', characteristic.uuid, value);\r\n//         return characteristic.writeValue(value);\r\n//       }).catch( e => { this._error(e) } );\r\n//     }\r\n//\r\n//     _error(msg) {\r\n//       if(this._debug) {\r\n//         console.debug(msg);\r\n//       } else {\r\n//         throw msg;\r\n//       }\r\n//     }\r\n//\r\n//     _log(msg) {\r\n//       if(this._debug) {\r\n//         console.log(msg);\r\n//       }\r\n//     }\r\n//\r\n//     _cacheCharacteristic(service, characteristicUuid) {\r\n//       return service.getCharacteristic(characteristicUuid)\r\n//         .then(characteristic => {\r\n//           this._characteristics.set(characteristicUuid, characteristic);\r\n//         });\r\n//     }\r\n//\r\n//     _decodeString(data) {\r\n//       return decoder.decode(data);\r\n//     }\r\n//     _encodeString(data) {\r\n//       return encoder.encode(data);\r\n//     }\r\n//   }\r\n//\r\n//   return WebBluetooth;\r\n//\r\n// })();\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}